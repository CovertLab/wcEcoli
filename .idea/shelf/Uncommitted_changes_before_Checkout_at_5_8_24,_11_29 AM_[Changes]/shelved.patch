Index: models/ecoli/analysis/multigen/gene_counts.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nPlot mRNA and protein counts for genes across multiple generations\n\"\"\"\n\nimport pickle\nimport os\n\nfrom matplotlib import pyplot as plt\n# noinspection PyUnresolvedReferences\nimport numpy as np\n\nfrom models.ecoli.analysis import multigenAnalysisPlot\nfrom wholecell.analysis.analysis_tools import (exportFigure,\n\tread_stacked_bulk_molecules, read_stacked_columns)\nfrom wholecell.io.tablereader import TableReader\n\n# Replace with the proteins you would like to visualize here:\ninterest_proteins = np.array([\n\t# 'ACRD-MONOMER[i]',\n\t# 'CYNX-MONOMER[i]',\n\t# 'B0270-MONOMER[i]',\n\t# 'G7634-MONOMER[i]',\n\t#'EG11854-MONOMER[c]',\n\t#'G6606-MONOMER[c]',\n\t'MONOMER0-2678[c]',\n\t'EG10037-MONOMER[c]',\n\t'PD00519[c]',\n])\n\nclass Plot(multigenAnalysisPlot.MultigenAnalysisPlot):\n\tdef do_plot(self, seedOutDir, plotOutDir, plotOutFileName, simDataFile,\n\t\t\t\tvalidationDataFile, metadata):\n\t\twith open(simDataFile, 'rb') as f:\n\t\t\tsim_data = pickle.load(f)\n\t\twith open(validationDataFile, 'rb') as f:\n\t\t\tvalidation_data = pickle.load(f)\n\n\t\tcell_paths = self.ap.get_cells()\n\t\tvariant = self.ap.get_variants()\n\t\tseed = self.ap.get_seeds()\n\t\tsim_dir = cell_paths[0]\n\t\tsimOutDir = os.path.join(sim_dir, 'simOut')\n\n\t\t# Determine new gene ids\n\t\twith open(simDataFile, 'rb') as f:\n\t\t\tsim_data = pickle.load(f)\n\t\tmRNA_cistron_sim_data = sim_data.process.transcription.cistron_data.struct_array\n\t\tmonomer_sim_data = sim_data.process.translation.monomer_data.struct_array\n\n\t\t# extract info about the protein(s) from the monomer data:\n\t\tmonomer_data_idxs = []\n\t\tfor protein in interest_proteins:\n\t\t\tmonomer_idx = np.where(monomer_sim_data['id'] == protein)\n\t\t\tmonomer_idx = monomer_idx[0][0]\n\t\t\tmonomer_data_idxs.append(monomer_idx)\n\t\tip_monomer_data = monomer_sim_data[monomer_data_idxs]\n\t\tip_monomer_ids = ip_monomer_data['id']\n\t\tip_cistron_ids = ip_monomer_data['cistron_id']\n\n\t\t# extract info about the protein(s) from the mRNA/cistron data:\n\t\tmRNA_data_idxs = []\n\t\tfor cistron in ip_cistron_ids:\n\t\t\tmRNA_idx = np.where(mRNA_cistron_sim_data['id'] == cistron)\n\t\t\tmRNA_idx = mRNA_idx[0][0]\n\t\t\tmRNA_data_idxs.append(mRNA_idx)\n\t\tip_mRNA_data = mRNA_cistron_sim_data[mRNA_data_idxs]\n\t\tip_gene_ids = np.array(ip_mRNA_data['gene_id'])\n\t\tcistron_ids = ip_cistron_ids\n\n\t\tcistron_monomer_id_dict = dict(zip(monomer_sim_data['cistron_id'],\n\t\t\t\t\t\t\t\t\t\tmonomer_sim_data['id']))\n\t\tcistron_monomer_ids = [cistron_monomer_id_dict.get(mRNA_id)\n\t\t\t\t\t\t\t\tfor mRNA_id in cistron_ids]\n\n\t\t# Extract mRNA indexes for each gene of interest\n\t\tmRNA_counts_reader = TableReader(os.path.join(simOutDir,\n\t\t\t\t\t\t\t\t\t\t\t\t\t  'RNACounts'))\n\t\tmRNA_idx_dict = {rna: i for i, rna in enumerate(\n\t\t\tmRNA_counts_reader.readAttribute('mRNA_cistron_ids'))}\n\t\tnew_gene_mRNA_indexes = [mRNA_idx_dict.get(mRNA_id) for mRNA_id in\n\t\t\t\t\t\t\t\t cistron_ids]\n\n\t\t# Load data\n\t\ttime = read_stacked_columns(cell_paths, 'Main', 'time', ignore_exception=True)\n\t\t(ip_monomer_counts,) = read_stacked_bulk_molecules(\n\t\t\tcell_paths, cistron_monomer_ids, ignore_exception=True)\n\t\tip_mRNA_counts = read_stacked_columns(\n\t\t\tcell_paths, 'RNACounts', 'mRNA_cistron_counts', ignore_exception=True)[:, new_gene_mRNA_indexes]\n\n\t\t# Plotting\n\t\tplt.figure(figsize = (8.5, 11))\n\t\t# Get doubling times from cells with this variant index\n\t\tdt = read_stacked_columns(\n\t\t\tcell_paths, 'Main', 'time',\n\t\t\tfun=lambda x: (x[-1] - x[0]) / 60.).squeeze()\n\t\tdts = np.zeros(len(dt))\n\t\tfor i in range(len(dt)):\n\t\t\tif i == 0:\n\t\t\t\tgt = dt[i]\n\t\t\t\tdts[i] = gt\n\t\t\telse:\n\t\t\t\tgt = dt[i] + dts[i-1]\n\t\t\t\tdts[i] = gt\n\n\t\t# Protein Counts\n\t\tplt.subplot(2, 1, 1)\n\t\tfor x in dts:\n\t\t\tplt.axvline(x=x, color='#bcbd22', linestyle='--', linewidth=2)\n\t\tif len(cistron_monomer_ids) == 1:\n\t\t\tplt.plot(time / 60., ip_monomer_counts,\n\t\t\t\t\t label = cistron_monomer_ids[0])\n\t\telse:\n\t\t\tfor m in range(len(cistron_monomer_ids)):\n\t\t\t\tplt.plot(time / 60., ip_monomer_counts[:,m],\n\t\t\t\t\t\t label = cistron_monomer_ids[m])\n\n\t\tplt.xlabel(\"Time (min)\")\n\t\tplt.ylabel(\"Protein Counts\")\n\t\tplt.title(f\"Protein Counts for Proteins of Interest in variant\"\n\t\t\t\t  f\" {variant}, seed {seed}\")\n\t\tplt.legend()\n\n\t\t# mRNA Counts\n\t\tplt.subplot(2, 1, 2)\n\t\tfor x in dts:\n\t\t\tplt.axvline(x=x, color='#bcbd22', linestyle='--', linewidth=2)\n\t\tif len(cistron_ids) == 1:\n\t\t\tplt.plot(time / 60., ip_mRNA_counts,\n\t\t\t\t\t label=cistron_ids[0])\n\t\telse:\n\t\t\tfor r in range(len(cistron_ids)):\n\t\t\t\tplt.plot(time / 60., ip_mRNA_counts[:,r],\n\t\t\t\t\t\t label = cistron_ids[r])\n\t\tplt.xlabel(\"Time (min)\")\n\t\tplt.ylabel(\"Cistron Counts\")\n\t\tplt.title(f\"mRNA Counts for Proteins of Interest in variant {variant},\"\n\t\t\t\t  f\" seed {seed}\")\n\t\tplt.legend()\n\n\t\tplt.subplots_adjust(hspace = 0.5, top = 0.95, bottom = 0.05)\n\t\texportFigure(plt, plotOutDir, plotOutFileName + '_variant_' +\n\t\t\t\t\t str(variant) + '_seed_' + str(seed), metadata)\n\t\tplt.close(\"all\")\n\nif __name__ == '__main__':\n\tPlot().cli()\n
===================================================================
diff --git a/models/ecoli/analysis/multigen/gene_counts.py b/models/ecoli/analysis/multigen/gene_counts.py
--- a/models/ecoli/analysis/multigen/gene_counts.py	
+++ b/models/ecoli/analysis/multigen/gene_counts.py	
@@ -13,6 +13,7 @@
 from wholecell.analysis.analysis_tools import (exportFigure,
 	read_stacked_bulk_molecules, read_stacked_columns)
 from wholecell.io.tablereader import TableReader
+from wholecell.utils import constants
 
 # Replace with the proteins you would like to visualize here:
 interest_proteins = np.array([
