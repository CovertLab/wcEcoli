"""
Extracts protein half-lives from a subselected set of Supplementary Table S1 of Gupta et. al. (determined by NV and MG),
"Global Protein-Turnover Quantification in Escherichia coli Reveals Cytoplasmic Recycling under Nitrogen Limitation"
doi: https://doi.org/10.1101/2022.08.01.502339
"""

import io
import os
import time
from typing import Dict

from wholecell.io import tsv
from wholecell.utils.filepath import ROOT_PATH

# Arbitrarily-determined higher half-life time cutoff in minutes. Proteins with
# half-lives above MAX_HALF_LIFE are all given a half-life of MAX_HALF_LIFE.
MAX_HALF_LIFE = 5000.

# Number of decimals when rounding half-life values (in units of min)
ROUND_N_DECIMALS = 1

# Directories
FILE_LOCATION = os.path.realpath(os.path.dirname(__file__))

# Files
INPUT = os.path.join(FILE_LOCATION, 'gupta_s1_protein_half_lives_monomer.tsv')

OUTPUT_FLAT_FILE = os.path.join(
    ROOT_PATH, 'reconstruction', 'ecoli', 'flat',
    'protein_half_lives_measured_Gupta_2024.tsv')



def get_half_lives():
    # type: () -> Dict[str, float]
    """
    Reads protein half-lives in minutes subselected from Gupta et. al. (2024),
    and stores them in a dictionary. Any protein listed that does not exist in the model is skipped.

    Args:
        symbols_to_monomer_ids: Dictionary that maps gene symbols to protein
        monomer ID's used by the model.

    Returns:
        id_to_half_life: Dictionary that maps protein monomer ids to their
        half-lives as reported in Gupra et. al. (2022).

    """

    id_to_half_life = {}

    with io.open(INPUT, 'rb') as f:
        reader = tsv.reader(f, delimiter='\t')

        headers = next(reader)
        while headers[0].startswith('#'):
            headers = next(reader)

        monomer_index = headers.index('monomer_id')
        half_life_index = headers.index('half_life (units.min)')


        for line in reader:
            monomer_symbol = line[monomer_index]
            if line[half_life_index]:
                half_life = float(line[half_life_index])
                id_to_half_life[monomer_symbol] = half_life

    return id_to_half_life


def build_half_life_table(raw_half_lives):
    # type: (Dict[str, float]) -> None
    """
    Builds the protein half-life flat file that is used as raw data for
    simulations using them. Assigns all proteins with half-lives greater than
    the arbitrarily chosen MAX_HALF_LIFE as having a half-life of MAX_HALF-LIFE.

    Args:
        raw_half_lives: Dictionary that maps monomer ID's to their half-lives
        as reported in Gupta et. al. (2024).
    """
    # Builds list of tuples that stores half-life data
    half_life_data = [
        (monomer_id, round(min(half_life, MAX_HALF_LIFE), ROUND_N_DECIMALS))
        for (monomer_id, half_life) in raw_half_lives.items()
        ]

    # Sort by monomer ID
    half_life_data.sort(key=lambda v: v[0])

    # Write to flat file
    with io.open(OUTPUT_FLAT_FILE, 'wb') as f:
        print('Writing to {}'.format(f.name))
        writer = tsv.writer(f, quotechar="'", lineterminator='\n')
        writer.writerow(['# Generated by {} on {}'.format(__file__, time.ctime())])
        writer.writerow(['"id"', '"half_life (units.min)"'])

        for row in half_life_data:
            writer.writerow([f'"{row[0]}"', f'{row[1]}'])


if __name__ == '__main__':

    raw_half_lives = get_half_lives()

    build_half_life_table(raw_half_lives)
