"""
Calculate complex counts and compare for monomers that appear in complexes
"""

# todo: for now this calls from pre-made tables generated by a script in a different branch, change later when merged with master

import pickle
import os
import pandas as pd
from matplotlib import pyplot as plt
# noinspection PyUnresolvedReferences
import numpy as np

from models.ecoli.analysis import cohortAnalysisPlot
from wholecell.analysis.analysis_tools import (exportFigure,
	read_bulk_molecule_counts, read_stacked_bulk_molecules, read_stacked_columns)
from wholecell.io.tablereader import TableReader

""" USER INPUTS """
# decide which generations to ignore, if any.
IGNORE_FIRST_N_GENS = 2
# decide what the threshold for molecules in complex/free monomer form is:
COMPLEX_THRESHOLD = .9

# path to tables:
monomers_in_multiple_complexes_table_path = '~/wcEcoli/out/CLClim3dNE/wildtype_000000/plotOut/free_vs_complexed_monomer_countsmonomers_in_multiple_protein_complexes.tsv'
monomers_in_one_complex_path = '~/wcEcoli/out/CLClim3dNE/wildtype_000000/plotOut/free_vs_complexed_monomer_countsMonomers_in_one_complex.tsv'
monomers_in_zero_complexes_path = '~/wcEcoli/out/CLClim3dNE/wildtype_000000/plotOut/free_vs_complexed_monomer_countsMonomers_not_in_complex.tsv'

# read in the tables
monomers_in_multiple_complexes = pd.read_csv(monomers_in_multiple_complexes_table_path, sep='\t')
monomers_in_one_complex = pd.read_csv(monomers_in_one_complex_path, sep='\t')
monomers_in_zero_complexes = pd.read_csv(monomers_in_zero_complexes_path, sep='\t')

""" END USER INPUTS """

class Plot(cohortAnalysisPlot.CohortAnalysisPlot):
	def generate_data(self, simDataFile):
		"""
        Generates csv files of protein count data from simulations
        Args:
            simDataFile: simulation data file
        Returns:
            #TODO: update this description
            protein_counts: protein count (PC) data for all proteins (originally
             present on the E.coli chromosome) in the simulation for each variant
              (the PC for each protein is averaged over all the generations)
            self.total_protein_counts: the original PCs and new gene (NG) PCs
            in one variable
            self.new_gene_monomer_ids: protein ids for new genes inserted into
            the E.coli genome
            self.original_gene_ids: protein ids for the original proteins on
            the E.coli genome
            self.all_monomer_ids: list of all the monomer ids (NG protein ids
            and orginal proteins' gene ids)
        """
		with open(simDataFile, 'rb') as f:
			sim_data = pickle.load(f)
		monomer_sim_data = (
			sim_data.process.translation.monomer_data.struct_array)
		self.all_monomer_ids = monomer_sim_data['id']

		# Get the paths for all cells:
		all_cells = self.ap.get_cells(
			generation=np.arange(IGNORE_FIRST_N_GENS, self.n_total_gens),
			only_successful=True)
		sim_dir = all_cells[0]  # this can be arbitrary, just needs to exist
		simOutDir = os.path.join(sim_dir, 'simOut')

		monomer_counts_reader = TableReader(os.path.join(simOutDir,
														 'MonomerCounts'))
		monomer_idx_dict = {monomer: i for i, monomer in enumerate(
			monomer_counts_reader.readAttribute('monomerIds'))}
		monomer_indexes = [monomer_idx_dict.get(monomer_id) for
						   monomer_id in self.all_monomer_ids]

		# Get the average total protein counts for each monomer:
		total_counts = (
			read_stacked_columns(all_cells, 'MonomerCounts',
								 'monomerCounts', ignore_exception=True))
		avg_total_counts = np.mean(total_counts, axis=0)

		total_monomer_counts = (
				read_stacked_columns(all_cells, 'MonomerCounts',
									 'monomerCounts',
									 ignore_exception=True))[:, monomer_indexes]
		avg_total_monomer_counts = np.mean(total_monomer_counts, axis=0)

		# Get the average free protein counts for each monomer:
		(free_counts,) = read_stacked_bulk_molecules(
			all_cells, self.all_monomer_ids, ignore_exception=True)
		avg_free_counts = np.mean(free_counts, axis=0)

		# Get the average complex counts for each monomer:
		avg_complex_counts = avg_total_counts - avg_free_counts

		#
		hi = 5
		import ipdb;
		ipdb.set_trace()

		return self.all_monomer_ids, avg_total_counts, avg_free_counts, avg_complex_counts

	def determine_complex_fraction(self, simDataFile):
		"""
		Determines the fraction of proteins in complex form for each monomer
		Args:
			simDataFile: simulation data file
		Returns:
			complex_fraction: fraction of proteins in complex form for each monomer
		"""
		# Obtain counts data:
		monomer_ids, avg_total_counts, avg_free_counts, avg_complex_counts = self.generate_data(
			simDataFile)



		# Using the threshold, determine which monomers are considered in complex form:
		complex_fraction = avg_complex_counts / avg_total_counts



		return complex_fraction

	def do_plot(self, variantDir, plotOutDir, plotOutFileName, simDataFile, validationDataFile, metadata):
		# Get the paths for all cells:

		cell_paths = self.ap.get_cells()
		self.n_total_gens = self.ap.n_generation

		hi = 5
		monomer_ids, avg_total_counts, avg_free_counts, avg_complex_counts = self.generate_data(simDataFile)




if __name__ == '__main__':
	Plot().cli()
